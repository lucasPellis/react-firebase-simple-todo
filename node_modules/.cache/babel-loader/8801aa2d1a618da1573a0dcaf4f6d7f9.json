{"ast":null,"code":"var _jsxFileName = \"/home/lucas/STUDY/React/Practice/react-firebase-simple-todo/src/components/List.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport * as actions from '../actions';\nimport ListItem from './ListItem';\nimport \"./style.css\";\n\nclass List extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showForm: false,\n      formValue: \"\"\n    };\n\n    this.inputChange = event => {\n      this.setState({\n        formValue: event.target.value\n      });\n    };\n\n    this.formSubmit = event => {\n      const {\n        formValue\n      } = this.state;\n      const {\n        addToDo\n      } = this.props;\n      event.preventDefault();\n      addToDo({\n        title: formValue\n      });\n      this.setState({\n        formValue: \"\"\n      });\n    };\n\n    this.renderForm = () => {\n      const {\n        showForm,\n        formValue\n      } = this.state;\n\n      if (showForm) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: \"todo-add-form\",\n          className: \"col s10 offset-s1\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"form\", {\n          onSubmit: this.formSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"input-field\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          value: formValue,\n          onChange: this.inputChange,\n          id: \"toDoNext\",\n          type: \"text\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: \"toDoNext\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }\n        }, \"What Next?\"))));\n      }\n    };\n  }\n\n  renderToDo() {\n    const {\n      data\n    } = this.props;\n\n    const toDos = _.map(data, (value, key) => {\n      return /*#__PURE__*/React.createElement(ListItem, {\n        key: key,\n        todoId: key,\n        todo: value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 14\n        }\n      });\n    });\n\n    if (!_.isEmpty(toDos)) {\n      return toDos;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col s10 offset-s1 center-align\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"You have no more things ToDo!\"));\n  }\n\n  componentWillMount() {\n    this.props.fetchToDos();\n  }\n\n  render() {\n    const {\n      showForm\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"to-do-list-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, this.renderForm(), this.renderToDo()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fixed-action-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.setState({\n        showForm: !showForm\n      }),\n      className: \"btn-floating btn-large black darken-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, showForm ? /*#__PURE__*/React.createElement(\"i\", {\n      className: \"large material-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"-\") : /*#__PURE__*/React.createElement(\"i\", {\n      className: \"large material-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, \"+\"))));\n  }\n\n}\n\nconst mapStateToProps = ({\n  data\n}) => {\n  return {\n    data\n  };\n};\n\nexport default connect(mapStateToProps, actions)(List);","map":{"version":3,"sources":["/home/lucas/STUDY/React/Practice/react-firebase-simple-todo/src/components/List.js"],"names":["React","Component","connect","_","actions","ListItem","List","state","showForm","formValue","inputChange","event","setState","target","value","formSubmit","addToDo","props","preventDefault","title","renderForm","renderToDo","data","toDos","map","key","isEmpty","componentWillMount","fetchToDos","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport _ from 'lodash';\nimport * as actions from '../actions';\nimport ListItem from './ListItem';\nimport \"./style.css\";\n\nclass List extends Component {\n  state = {\n    showForm: false,\n    formValue: \"\"\n  };\n\n  inputChange = event => {\n    this.setState({formValue: event.target.value});\n  };\n\n  formSubmit = event => {\n    const {formValue} = this.state;\n    const {addToDo} = this.props;\n    event.preventDefault();\n    addToDo({title: formValue});\n    this.setState({formValue: \"\"});\n  };\n\n  renderForm = () => {\n    const {showForm, formValue} = this.state;\n    if (showForm) {\n      return (\n        <div id=\"todo-add-form\" className=\"col s10 offset-s1\">\n          <form onSubmit={this.formSubmit}>\n            <div className=\"input-field\">\n              <input \n                value={formValue}\n                onChange={this.inputChange}\n                id=\"toDoNext\"\n                type=\"text\"\n              />\n              <label htmlFor=\"toDoNext\">What Next?</label>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  };\n  renderToDo() {\n    const {data} = this.props;\n    const toDos = _.map(data, (value, key) => {\n      return <ListItem key={key} todoId={key} todo={value} />;\n    });\n    if (!_.isEmpty(toDos)) {\n      return toDos;\n    }\n    return (\n      <div className=\"col s10 offset-s1 center-align\">\n        <h4>You have no more things ToDo!</h4>\n      </div>\n    );\n  }\n  componentWillMount() {\n    this.props.fetchToDos();\n  }\n  render() {\n    const {showForm} = this.state;\n    return (\n      <div className=\"to-do-list-container\">\n        <div className=\"row\">\n          {this.renderForm()}\n          {this.renderToDo()}\n        </div>\n        <div className=\"fixed-action-btn\">\n          <button \n            onClick={() => this.setState({showForm: !showForm})}\n            className=\"btn-floating btn-large black darken-4\"\n          >\n          {showForm ? (\n            <i className=\"large material-icons\">-</i>\n          ) : (\n            <i className=\"large material-icons\">+</i>\n          )}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({data}) => {\n  return {\n    data\n  }\n}\n\nexport default connect(mapStateToProps, actions)(List);"]},"metadata":{},"sourceType":"module"}